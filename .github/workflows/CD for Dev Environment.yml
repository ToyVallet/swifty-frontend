name: CI/CD for Dev Environment

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.10.0
          driver-opts: image=moby/buildkit:v0.11.0

      - name: Cache Docker layers
        id: cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        id: login-docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  build-user-web:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Build and push user-web image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/user-web:dev
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build-root-admin:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Build and push root-admin image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/root-admin:dev
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  deploy:
    runs-on: ubuntu-latest
    needs: [build-user-web, build-root-admin]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Create Docker Compose file from template
        run: |
          echo "version: '3.8'" > docker-compose.yml
          echo "" >> docker-compose.yml
          echo "services:" >> docker-compose.yml
          echo "  user-web:" >> docker-compose.yml
          echo "    image: ${{ secrets.DOCKER_USERNAME }}/user-web:dev" >> docker-compose.yml
          echo "    network_mode: 'host'" >> docker-compose.yml
          echo "    environment:" >> docker-compose.yml
          echo "      NODE_ENV: production" >> docker-compose.yml
          echo "      PORT: 3000" >> docker-compose.yml
          echo "    command: ['node', 'apps/user-web/server.js']" >> docker-compose.yml
          echo "    restart: always" >> docker-compose.yml
          echo "    logging:" >> docker-compose.yml
          echo "      driver: json-file" >> docker-compose.yml
          echo "      options:" >> docker-compose.yml
          echo "        max-size: '10m'" >> docker-compose.yml
          echo "        max-file: '3'" >> docker-compose.yml
          echo "    security_opt:" >> docker-compose.yml
          echo "      - no-new-privileges:true" >> docker-compose.yml
          echo "    read_only: true" >> docker-compose.yml
          echo "    tmpfs:" >> docker-compose.yml
          echo "      - /tmp" >> docker-compose.yml
          echo "" >> docker-compose.yml
          echo "  root-admin:" >> docker-compose.yml
          echo "    image: ${{ secrets.DOCKER_USERNAME }}/root-admin:dev" >> docker-compose.yml
          echo "    network_mode: 'host'" >> docker-compose.yml
          echo "    environment:" >> docker-compose.yml
          echo "      NODE_ENV: production" >> docker-compose.yml
          echo "      PORT: 3001" >> docker-compose.yml
          echo "    command: ['node', 'apps/root-admin/server.js']" >> docker-compose.yml
          echo "    restart: always" >> docker-compose.yml
          echo "    logging:" >> docker-compose.yml
          echo "      driver: json-file" >> docker-compose.yml
          echo "      options:" >> docker-compose.yml
          echo "        max-size: '10m'" >> docker-compose.yml
          echo "        max-file: '3'" >> docker-compose.yml
          echo "    security_opt:" >> docker-compose.yml
          echo "      - no-new-privileges:true" >> docker-compose.yml
          echo "    read_only: true" >> docker-compose.yml
          echo "    tmpfs:" >> docker-compose.yml
          echo "      - /tmp" >> docker-compose.yml

      - name: Deploy Docker Compose services
        run: |
          sudo docker-compose down
          sudo docker-compose up -d
